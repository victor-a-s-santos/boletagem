// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solve.FinancialMarketIntegration.API.Areas.Security.Infrastructure.DataAccess;

namespace Solve.FinancialMarketIntegration.API.Areas.Security.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190612144520_1.0.0.0")]
    partial class _1000
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Group","Security");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.GroupRole", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("RoleId");

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRole","Security");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role","Security");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTimeOffset?>("LastAccessDate");

                    b.Property<string>("LastAccessToken")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset?>("LastPasswordChangedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<DateTimeOffset>("PasswordExpirationDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordResetHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserDocument");

                    b.Property<string>("UserName")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("User","Security");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup","Security");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("PasswordHash");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPassword","Security");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.GroupRole", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserGroup", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserPassword", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.User")
                        .WithMany("PasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
