// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solve.FinancialMarketIntegration.API.Areas.Security.Infrastructure.DataAccess;

namespace Solve.FinancialMarketIntegration.API.Areas.Security.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190617214746_1.0.0.1")]
    partial class _1001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Group","Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1150), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1170), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Gestores Master"
                        },
                        new
                        {
                            Id = 2,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1190), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1190), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Adm. Fiduci"
                        },
                        new
                        {
                            Id = 3,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1200), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1200), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Custodia"
                        },
                        new
                        {
                            Id = 4,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1210), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1210), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Liquidação (Open)"
                        },
                        new
                        {
                            Id = 5,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1220), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1220), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Middle Adm. Fiduci"
                        },
                        new
                        {
                            Id = 6,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1230), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1230), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Administrator do Sistema"
                        },
                        new
                        {
                            Id = 7,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1240), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1240), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Gestores Boleta"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.GroupRole", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("RoleId");

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRole","Security");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 20
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 21
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 22
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 23
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 24
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 25
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 26
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 27
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 29
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 10
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 18
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 19
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 20
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 21
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 22
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 23
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 24
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 25
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 26
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 8
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 15
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 16
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 18
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 19
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 20
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 21
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 22
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 23
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 24
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 25
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 26
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 11
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 12
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 18
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 19
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 20
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 21
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 22
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 23
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 24
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 25
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 26
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 13
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 14
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 18
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 19
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 20
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 21
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 22
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 23
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 24
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 25
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 26
                        },
                        new
                        {
                            GroupId = 6,
                            RoleId = 28
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 4
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 5
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 6
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 7
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 9
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 18
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 19
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 20
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 21
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 22
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 23
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 24
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 25
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 26
                        },
                        new
                        {
                            GroupId = 7,
                            RoleId = 27
                        },
                        new
                        {
                            GroupId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            GroupId = 2,
                            RoleId = 17
                        },
                        new
                        {
                            GroupId = 3,
                            RoleId = 17
                        },
                        new
                        {
                            GroupId = 4,
                            RoleId = 17
                        },
                        new
                        {
                            GroupId = 5,
                            RoleId = 17
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role","Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4360), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4380), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Cotas"
                        },
                        new
                        {
                            Id = 2,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4400), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4410), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de RF - Título Privado"
                        },
                        new
                        {
                            Id = 3,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4420), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4420), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de RF - Título Público"
                        },
                        new
                        {
                            Id = 4,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4430), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4430), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Futuros"
                        },
                        new
                        {
                            Id = 5,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4440), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4440), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Margem"
                        },
                        new
                        {
                            Id = 6,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4450), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4450), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Compromissada de Compra"
                        },
                        new
                        {
                            Id = 7,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4460), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4460), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Termo de Moeda"
                        },
                        new
                        {
                            Id = 8,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4470), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4470), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Renda Variável"
                        },
                        new
                        {
                            Id = 9,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4480), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4480), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar boletas de Swap-CETIP"
                        },
                        new
                        {
                            Id = 10,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4480), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4490), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Pendente de Aprovação pela ADM"
                        },
                        new
                        {
                            Id = 11,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4490), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4500), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Aguardando Liquidação (Open)"
                        },
                        new
                        {
                            Id = 12,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4500), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4510), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Em Liquidação (Open)"
                        },
                        new
                        {
                            Id = 13,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4510), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4520), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Aguardando Liquidação (Middle ADM Fiduci)"
                        },
                        new
                        {
                            Id = 14,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4520), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4530), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Em Liquidação (Middle ADM Fiduci)"
                        },
                        new
                        {
                            Id = 15,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4530), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4540), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Aguardando Liquidação (Custódia)"
                        },
                        new
                        {
                            Id = 16,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4540), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4550), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Em Liquidação (Custódia)"
                        },
                        new
                        {
                            Id = 27,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4550), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4560), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Aprovar boletas Pendente Aprovação do Gestor"
                        },
                        new
                        {
                            Id = 17,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4560), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4570), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar histórico de aprovação"
                        },
                        new
                        {
                            Id = 18,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4570), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4580), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Cotas"
                        },
                        new
                        {
                            Id = 19,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4580), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4580), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de RF - Título Privado"
                        },
                        new
                        {
                            Id = 20,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4590), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4590), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de RF - Título Público"
                        },
                        new
                        {
                            Id = 21,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4600), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4600), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Futuros"
                        },
                        new
                        {
                            Id = 22,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4610), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4610), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Margem"
                        },
                        new
                        {
                            Id = 23,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4620), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4620), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Compromissada de Compra"
                        },
                        new
                        {
                            Id = 24,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4630), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4630), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Termo de Moeda"
                        },
                        new
                        {
                            Id = 25,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4640), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4640), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Renda Variável"
                        },
                        new
                        {
                            Id = 26,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4650), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4650), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Visualizar monitor de Swap-CETIP"
                        },
                        new
                        {
                            Id = 28,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4660), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4660), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar Usuário Master"
                        },
                        new
                        {
                            Id = 29,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4810), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(4820), new TimeSpan(0, -3, 0, 0, 0)),
                            Name = "Criar Usuário Subordinado"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTimeOffset?>("LastAccessDate");

                    b.Property<string>("LastAccessToken")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset?>("LastPasswordChangedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<DateTimeOffset>("PasswordExpirationDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordResetHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserDocument");

                    b.Property<string>("UserName")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("User","Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(2800), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(1000), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "estelle_ankunding36@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Estelle Ankunding (Gestor)",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(6980), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTA==",
                            UserName = "gestor"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7590), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7620), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "dee_rippin@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Dee Rippin (Adm Fiduci)",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7670), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTB==",
                            UserName = "admin.fiduci"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7690), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7690), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "garrett_dickinson37@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Garrett Dickinson (Custódia)",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7700), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTC==",
                            UserName = "custodia"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7700), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7710), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "zula_stokes37@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Zula Stokes V (Open)",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7720), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTD==",
                            UserName = "open"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7720), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7730), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "maia_spinka@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Maia Spinka (Middle ADM)",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7730), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTE==",
                            UserName = "middle.adm"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7740), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7740), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "admin@admin.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7750), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTF==",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = (short)0,
                            Active = true,
                            ChangeDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7760), new TimeSpan(0, -3, 0, 0, 0)),
                            CreationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7760), new TimeSpan(0, -3, 0, 0, 0)),
                            Email = "bart_larson@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ms. Bart Larson (Gestor)",
                            PasswordExpirationDate = new DateTimeOffset(new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Unspecified).AddTicks(7770), new TimeSpan(0, -3, 0, 0, 0)),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            PhoneNumberConfirmed = true,
                            Salt = "IHxey3JXmJa0gWCXqUxvTG==",
                            UserName = "gestor2"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup","Security");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 7
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 5,
                            UserId = 5
                        },
                        new
                        {
                            GroupId = 6,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("PasswordHash");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPassword","Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(8720),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(170),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(190),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(190),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(200),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(200),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2019, 6, 4, 15, 40, 50, 895, DateTimeKind.Local).AddTicks(200),
                            PasswordHash = "IpfLSPx0mU8z1kXnSrwuZ62rjA7ebAxzirzc7S5JtgU=",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.GroupRole", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserGroup", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.UserPassword", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Security.Entities.User")
                        .WithMany("PasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
