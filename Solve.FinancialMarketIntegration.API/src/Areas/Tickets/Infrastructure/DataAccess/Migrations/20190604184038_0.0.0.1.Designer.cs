// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solve.FinancialMarketIntegration.API.Areas.Tickets.Infrastructure.DataAccess;

namespace Solve.FinancialMarketIntegration.API.Areas.Tickets.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(TicketDataContext))]
    [Migration("20190604184038_0.0.0.1")]
    partial class _0001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.AccountManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Document");

                    b.Property<string>("Name");

                    b.Property<string>("SacCode");

                    b.HasKey("Id");

                    b.ToTable("AccountManager","Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "16.804.280/0001-20",
                            Name = "KRON GESTÃO DE INVESTIMENTOS",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "05.043.746/0001-04",
                            Name = "ZERO CONFLICT WEALTH MANAGEMENT LTDA",
                            SacCode = "ZERO CON"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "07.252.227/0001-73",
                            Name = "GRAU GESTÃO",
                            SacCode = "GRAU GES"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "10.757.908/0001-06",
                            Name = "BERKANA INVESTIMENTOS E GESTÃO DE RECURSOS LTDA",
                            SacCode = "BERKANA"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "20.495.002/0001-06",
                            Name = "R2C",
                            SacCode = "R2C"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "25.098.663/0001-11",
                            Name = "KP GESTÃO DE RECURSOS",
                            SacCode = "KP GESTA"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "24.515.907/0001-51",
                            Name = "ATRIO GESTORA DE ATIVOS LTDA. (antiga Sul Brasil Gestora)",
                            SacCode = "ATRIO"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "09.311.153/0001-24",
                            Name = "RIO DAS PEDRAS ADMINISTRAÇÃO E PARTICIPAÇÕES LTDA",
                            SacCode = "RIODASPE"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "06.576.569/0001-86",
                            Name = "INTEGRAL INVESTIMENTOS LTDA",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "11.916.849/0001-26",
                            Name = "OURO PRETO GESTÃO DE RECURSOS S.A.",
                            SacCode = "OURO"
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "04.661.817/0001-61",
                            Name = "KINEA PRIVATE VariableIncome INVESTIMENTOS S/A",
                            SacCode = "KINEAPEQ"
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "09.121.454/0001-95",
                            Name = "TERCON INVESTIMENTOS LTDA",
                            SacCode = "J&M INV"
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "17.480.662/0001-09",
                            Name = "FACT INVESTMENTS GESTAO DE RECURSOS LTDA",
                            SacCode = "FACT INV"
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "09.456.933/0001-62",
                            Name = "QUATÁ GESTÃO DE RECURSOS LTDA",
                            SacCode = "QUATA"
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "09.446.129/0001-00",
                            Name = "G5 ADMINISTRADORA DE RECURSOS LTDA.",
                            SacCode = "G5"
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "05.451.668/0001-79",
                            Name = "POLO CAPITAL GESTÃO DE RECURSOS LTDA",
                            SacCode = "POLO CAP"
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "16.492.426/0001-40",
                            Name = "VALER INVESTIMENTOS (BRAZCORE)",
                            SacCode = "VALER"
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "08.592.877/0001-20",
                            Name = "DEL MONTE - GESTÃO DE INVESTIMENTOS LTDA",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "04.608.141/0001-42",
                            Name = "SFI INVESTIMENTOS LTDA",
                            SacCode = "SFI INV"
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "08.639.165/0001-10",
                            Name = "ABC CAPITAL - GESTAO DE INVESTIMENTOS LTDA.",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 21,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "19.207.159/0001-00",
                            Name = "PRIVATTO INVESTIMENTOS",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 22,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "16.925.467/0001-82",
                            Name = "GLOBAL GESTÃO E INVESTIMENTOS LTDA",
                            SacCode = "GLOBAL"
                        },
                        new
                        {
                            Id = 23,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "07.913.960/0001-91",
                            Name = "ITAJUI GESTÃO DE INVESTIMENTOS LTDA",
                            SacCode = "ITAJUI"
                        },
                        new
                        {
                            Id = 24,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "12.461.742/0001-01",
                            Name = "LATACHE GESTÃO DE RECURSOS LTDA",
                            SacCode = "LATACHE"
                        },
                        new
                        {
                            Id = 25,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "15.032.609/0001-10",
                            Name = "STARBOARD ASSET LTDA",
                            SacCode = "STARBOAR"
                        },
                        new
                        {
                            Id = 26,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "21.551.986.0001-68",
                            Name = "PARAGUAÇU INVESTIMENTOS EIRELLI",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 27,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "28.529.868/0001-21",
                            Name = "WNT GESTORA DE RECURSOS LTDA.",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 28,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "05.563.299/0001-06",
                            Name = "SOMMA INVESTIMENTOS S.A",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 29,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "09.442.277/0001-49",
                            Name = "AUSTRO CAPITAL",
                            SacCode = "AUSTROGE"
                        },
                        new
                        {
                            Id = 30,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "12.263.316/0001-55",
                            Name = "NOVA MILANO INVESTIMENTOS LTDA",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 31,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "28.925.400/0001-27",
                            Name = "TRIGONO CAPITAL",
                            SacCode = "TRIGONOC"
                        },
                        new
                        {
                            Id = 32,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "08.926.786/0001-84",
                            Name = "DETOMASO ADMINISTRADORA DE RECURSOS LTDA",
                            SacCode = "DETOMASO"
                        },
                        new
                        {
                            Id = 33,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "12.678.380/0001-05",
                            Name = "VERITAS - VCM Gestão de Capital - (Log Found)",
                            SacCode = "NINKA FI"
                        },
                        new
                        {
                            Id = 34,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "24.503.059/0001-60",
                            Name = "CIX CAPITAL",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 35,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "25.098.663/0001-11",
                            Name = "KP GESTÃO DE RECURSOS (demais fundos)",
                            SacCode = "KP GESTA"
                        },
                        new
                        {
                            Id = 36,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "07.559.989/0001-17",
                            Name = "VALORA GESTÃO DE INVESTIMENTOS",
                            SacCode = "VALORA"
                        },
                        new
                        {
                            Id = 37,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "16.492.426/0001-40",
                            Name = "VALER INVESTIMENTOS (BRAZCORE)",
                            SacCode = "VALER"
                        },
                        new
                        {
                            Id = 38,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "27.390.441/0001-01",
                            Name = "HOA ASET MANAGEMENT GESTÃO DE RECURSOS",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 39,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "27.913.835/0001-99",
                            Name = "AVENTIS GESTÃO DE RECURSOS LTDA ME (TRIDAFIN)",
                            SacCode = "AVENTIS"
                        },
                        new
                        {
                            Id = 40,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "29.263.481/0001-00",
                            Name = "EVEREST TRUST GESTORA DE RECURSOS LTDA.",
                            SacCode = "EVEREST"
                        },
                        new
                        {
                            Id = 41,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "10.924.308/0001-87",
                            Name = "IGUANA INVESTIMENTOS LTDA.",
                            SacCode = "IGUANA"
                        },
                        new
                        {
                            Id = 42,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "27.451.028/0001-00",
                            Name = "PRISMA CAPITAL LTDA",
                            SacCode = "PRISMA"
                        },
                        new
                        {
                            Id = 43,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "16.789.525/0001-98",
                            Name = "XP VISTA ASSET MANAGMENT LTDA.",
                            SacCode = "XP VISTA"
                        },
                        new
                        {
                            Id = 44,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "29.063.944/0001-90",
                            Name = "3J GESTORA DE RECURSOS LTDA.",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 45,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "27.690.986/0001-25",
                            Name = "ARC (antiga ARKON INVESTIMENTOS LTDA.)",
                            SacCode = "ARC CAPI"
                        },
                        new
                        {
                            Id = 46,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "16.707.841/0001-73",
                            Name = "TYR GESTÃO DE RECURSOS LTDA.",
                            SacCode = ""
                        },
                        new
                        {
                            Id = 47,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "12.620.044/0001-01",
                            Name = "ALPS CAPITAL GESTÃO E INVESTIMENTOS LTDA.",
                            SacCode = "ALPS CAP"
                        },
                        new
                        {
                            Id = 48,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Document = "20.043.909/0001-34",
                            Name = "FARM INVESTIMENTOS GESTÃO DE RECURSOS LTDA",
                            SacCode = ""
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.AccountManagerFund", b =>
                {
                    b.Property<int>("AccountManagerId");

                    b.Property<int>("FundId");

                    b.HasKey("AccountManagerId", "FundId");

                    b.HasIndex("FundId");

                    b.ToTable("AccountManagerFund","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CetipAccount")
                        .IsRequired()
                        .HasColumnName("FundCetipAccount")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnName("FundClass")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Code")
                        .HasColumnName("FundCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CodeIssuer")
                        .IsRequired()
                        .HasColumnName("FundCodeIssuer")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnName("FundDocument")
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<bool>("IsFIDC")
                        .HasColumnName("IsFIDC");

                    b.Property<bool>("IsNewIssue")
                        .HasColumnName("IsNewIssue");

                    b.Property<DateTimeOffset>("IssueDate")
                        .HasColumnName("IssueDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("FundName")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("FundType")
                        .HasColumnType("char(3)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Fund","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.MarketType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MarketType","Ticket");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "RF Título Privado"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "RF Título Público"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Renda Variável"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Dinheiro"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OperationType","Ticket");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Compra"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Venda"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Aplicacao"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Resgate"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "Deposito"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "Retirada"
                        },
                        new
                        {
                            Id = (short)7,
                            Name = "Moeda Comprada"
                        },
                        new
                        {
                            Id = (short)8,
                            Name = "Moeda Vendida"
                        },
                        new
                        {
                            Id = (short)9,
                            Name = "Transferência"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.SettlementType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SettlementType","Ticket");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "CETIP"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "TED"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Termo"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "À Vista"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountManagerId");

                    b.Property<string>("Annotations")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<DateTimeOffset>("OperationDate");

                    b.Property<short>("TypeId");

                    b.Property<int?>("WorkflowId");

                    b.Property<DateTimeOffset?>("WorkflowStartDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Ticket","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketContracted", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<int?>("Amount");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<decimal?>("IssueTax")
                        .IsRequired()
                        .HasColumnType("decimal(12,8)");

                    b.Property<short>("OperationTypeId");

                    b.Property<decimal?>("OperationValue")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTimeOffset?>("ReturnDate");

                    b.Property<string>("Security")
                        .IsRequired()
                        .HasColumnName("Security")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("SecurityId")
                        .IsRequired()
                        .HasColumnName("SecurityId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("UnitPriceOutward")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("UnitPriceReturn")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("ValueOutward")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("ValueReturn")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("TicketId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("TicketContracted","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketCurrencyTerm", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<bool>("CetipSettlement");

                    b.Property<string>("ContractNumber");

                    b.Property<bool>("CrossRate");

                    b.Property<short>("CurrencyId");

                    b.Property<DateTimeOffset>("ExpirationDate");

                    b.Property<decimal>("FutureFee")
                        .HasColumnType("decimal(12,8)");

                    b.Property<short?>("OperationTypeId");

                    b.Property<decimal>("OperationValue")
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("QuoteExpirationTypeId");

                    b.HasKey("TicketId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("TicketCurrencyTerm","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool?>("FullRedeem");

                    b.Property<bool?>("HasSameOwnership");

                    b.Property<bool?>("IsCetipVoice");

                    b.Property<bool>("IsIssueUnitPrice");

                    b.Property<bool>("IsSecondaryMarket");

                    b.Property<short>("OperationTypeId");

                    b.Property<decimal>("OperationValue")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("QuotaValue")
                        .HasColumnType("decimal(18,8)");

                    b.Property<short>("SettlementTypeId");

                    b.HasKey("TicketId");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("SettlementTypeId");

                    b.ToTable("TicketFundQuotas","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFutures", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<int?>("Amount")
                        .IsRequired();

                    b.Property<string>("Annotations")
                        .HasColumnName("Annotations")
                        .IsUnicode(false);

                    b.Property<string>("Broker");

                    b.Property<string>("BrokerAccount")
                        .IsRequired();

                    b.Property<string>("BrokerCode")
                        .IsRequired();

                    b.Property<string>("BrokerDocument")
                        .IsRequired();

                    b.Property<short>("OperationTypeId");

                    b.Property<string>("PaperCode")
                        .IsRequired();

                    b.Property<string>("PaperSerie")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<decimal?>("PercentageDiscount")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("TradingDate")
                        .IsRequired();

                    b.Property<decimal?>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("TicketId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("TicketFutures","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketMargin", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<string>("Account");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Asset");

                    b.Property<string>("Bank");

                    b.Property<string>("Branch");

                    b.Property<string>("CounterpartBrokerAccount")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("DueDate");

                    b.Property<short>("MarketTypeId");

                    b.Property<short>("OperationTypeId");

                    b.Property<decimal?>("OperationValue")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTimeOffset?>("PurchaseDate");

                    b.Property<decimal?>("Quotation")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SecurityCode");

                    b.Property<string>("SecurityName");

                    b.Property<string>("SecurityType");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("TicketId");

                    b.HasIndex("MarketTypeId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("TicketMargin","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPrivateFixedIncome", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<DateTimeOffset?>("AcquisitionDate");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Annotations");

                    b.Property<string>("AssetCode")
                        .HasMaxLength(15);

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("ExpirationDate");

                    b.Property<bool>("IsSecondaryMarket");

                    b.Property<bool>("IsTerm");

                    b.Property<DateTimeOffset>("IssueDate");

                    b.Property<decimal>("IssueFee")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("ObjectAction");

                    b.Property<short>("OperationTypeId");

                    b.Property<decimal>("OperationValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("TicketId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("TicketPrivateFixedIncome","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPublicFixedIncome", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<DateTimeOffset?>("AcquisitionDate");

                    b.Property<int?>("Amount");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<DateTimeOffset?>("IssueDate");

                    b.Property<decimal?>("IssueTax")
                        .HasColumnType("decimal(18,8)");

                    b.Property<short>("OperationTypeId");

                    b.Property<decimal?>("OperationValue")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Security")
                        .IsRequired()
                        .HasColumnName("Security")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("SecurityId")
                        .IsRequired()
                        .HasColumnName("SecurityId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("SettlementDate");

                    b.Property<short?>("SettlementTypeId");

                    b.Property<decimal?>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("TicketId");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("SettlementTypeId");

                    b.ToTable("TicketPublicFixedIncome","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketSwapCetip", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<string>("ActiveIndex");

                    b.Property<decimal>("ActiveIndexBase");

                    b.Property<decimal>("ActiveIndexPercent")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("ActiveIndexTax")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("ActiveInterestType");

                    b.Property<string>("Annotations");

                    b.Property<string>("Command");

                    b.Property<DateTimeOffset>("ExpirationDate");

                    b.Property<decimal>("OperationValue")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("PassiveIndex");

                    b.Property<decimal>("PassiveIndexBase");

                    b.Property<decimal>("PassiveIndexPercent")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("PassiveIndexTax")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("PassiveInterestType");

                    b.HasKey("TicketId");

                    b.ToTable("TicketSwapCetip","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Type","Ticket");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Cotas"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "CETIP"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "SELIC"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Compromissada"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "Futuros"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "SWAP CETIP"
                        },
                        new
                        {
                            Id = (short)7,
                            Name = "Margem"
                        },
                        new
                        {
                            Id = (short)8,
                            Name = "Termo de Moeda"
                        },
                        new
                        {
                            Id = (short)9,
                            Name = "Renda Variável"
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketVariableIncome", b =>
                {
                    b.Property<int?>("TicketId");

                    b.Property<string>("BrokerCode");

                    b.Property<decimal>("BuyTotal")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ClientCode");

                    b.Property<string>("ClientCodeDigit");

                    b.Property<DateTimeOffset?>("OperationDate");

                    b.Property<decimal>("SellTotal")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTimeOffset?>("StockExchangeDate");

                    b.HasKey("TicketId");

                    b.ToTable("TicketVariableIncome","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketVariableIncomeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("AssetCode");

                    b.Property<string>("BuyOrSell");

                    b.Property<string>("CompanyName");

                    b.Property<int>("Factor");

                    b.Property<string>("ISINCode");

                    b.Property<string>("ISINCodeDistribution");

                    b.Property<string>("IsAfterMarket");

                    b.Property<string>("MarketType");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SettlementType");

                    b.Property<string>("SettlementTypeOfSecondaryTerm");

                    b.Property<string>("Specification");

                    b.Property<string>("SpecificationIndicator");

                    b.Property<int>("TicketId");

                    b.Property<string>("TradingCode");

                    b.Property<string>("TradingCodeBusinessCode");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketVariableIncomeItems","Ticket");
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.UserAccountManager", b =>
                {
                    b.Property<int>("AccountManagerId");

                    b.Property<string>("UserIdentifier");

                    b.Property<bool>("IsMaster");

                    b.Property<DateTimeOffset?>("ChangeDate");

                    b.Property<string>("ChangeUser");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<string>("CreationUser");

                    b.Property<int>("Id");

                    b.HasKey("AccountManagerId", "UserIdentifier", "IsMaster");

                    b.ToTable("UserAccountManager","Ticket");

                    b.HasData(
                        new
                        {
                            AccountManagerId = 2,
                            UserIdentifier = "gestor",
                            IsMaster = true,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Id = 1
                        },
                        new
                        {
                            AccountManagerId = 1,
                            UserIdentifier = "gestor2",
                            IsMaster = true,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Id = 1
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.AccountManagerFund", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.AccountManager", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.AccountManager", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Portfolio", "Portfolio", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Account")
                                .IsRequired()
                                .HasColumnName("PortfolioAccount")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("ClearingAccount")
                                .HasColumnName("PortfolioClearingAccount")
                                .HasMaxLength(15)
                                .IsUnicode(false);

                            b1.Property<string>("Code")
                                .HasColumnName("PortfolioCode")
                                .HasMaxLength(21)
                                .IsUnicode(false);

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasColumnName("PortfolioDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("PortfolioName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketId");

                            b1.ToTable("Ticket","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket")
                                .WithOne("Portfolio")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Portfolio", "TicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketContracted", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketContracted", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketContractedTicketId");

                            b1.Property<string>("ClearingAccount")
                                .IsRequired()
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(15)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketContractedTicketId");

                            b1.ToTable("TicketContracted","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketContracted")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketContractedTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketCurrencyTerm", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId");

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketCurrencyTerm", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketCurrencyTermTicketId");

                            b1.Property<string>("ClearingAccount")
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketCurrencyTermTicketId");

                            b1.ToTable("TicketCurrencyTerm","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketCurrencyTerm")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketCurrencyTermTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.SettlementType", "SettlementType")
                        .WithMany()
                        .HasForeignKey("SettlementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas+FundInfo", "Fund", b1 =>
                        {
                            b1.Property<int?>("TicketFundQuotasTicketId");

                            b1.Property<string>("Account")
                                .HasColumnName("FundAcccount")
                                .HasMaxLength(15)
                                .IsUnicode(false);

                            b1.Property<string>("Bank")
                                .HasColumnName("FundBank")
                                .HasMaxLength(20)
                                .IsUnicode(false);

                            b1.Property<string>("Branch")
                                .HasColumnName("FundBranch")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("ClassSeries")
                                .HasColumnName("FundClassSeries")
                                .HasMaxLength(12)
                                .IsUnicode(false);

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasColumnName("FundDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<bool>("IsFIDC")
                                .HasColumnName("IsFIDC");

                            b1.Property<bool>("IsNewFund")
                                .HasColumnName("IsNewFund");

                            b1.Property<string>("IssuerName")
                                .HasColumnName("FundIssuerName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.Property<string>("MnemonicCode")
                                .HasColumnName("FundMnemonicCode")
                                .HasMaxLength(20)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("FundName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnName("FundType")
                                .HasColumnType("char(3)")
                                .IsUnicode(false);

                            b1.HasKey("TicketFundQuotasTicketId");

                            b1.ToTable("TicketFundQuotas","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas")
                                .WithOne("Fund")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas+FundInfo", "TicketFundQuotasTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketFundQuotasTicketId");

                            b1.Property<string>("ClearingAccount")
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketFundQuotasTicketId");

                            b1.ToTable("TicketFundQuotas","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFundQuotas")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketFundQuotasTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFutures", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketFutures", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketMargin", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.MarketType", "MarketType")
                        .WithMany()
                        .HasForeignKey("MarketTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketMargin", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketMarginTicketId");

                            b1.Property<string>("ClearingAccount")
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketMarginTicketId");

                            b1.ToTable("TicketMargin","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketMargin")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketMarginTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPrivateFixedIncome", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPrivateFixedIncome", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketPrivateFixedIncomeTicketId");

                            b1.Property<string>("ClearingAccount")
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketPrivateFixedIncomeTicketId");

                            b1.ToTable("TicketPrivateFixedIncome","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPrivateFixedIncome")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketPrivateFixedIncomeTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPublicFixedIncome", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.SettlementType", "SettlementType")
                        .WithMany()
                        .HasForeignKey("SettlementTypeId");

                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPublicFixedIncome", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketPublicFixedIncomeTicketId");

                            b1.Property<string>("ClearingAccount")
                                .IsRequired()
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(10)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(90)
                                .IsUnicode(false);

                            b1.HasKey("TicketPublicFixedIncomeTicketId");

                            b1.ToTable("TicketPublicFixedIncome","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketPublicFixedIncome")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketPublicFixedIncomeTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketSwapCetip", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketSwapCetip", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "Counterpart", b1 =>
                        {
                            b1.Property<int?>("TicketSwapCetipTicketId");

                            b1.Property<string>("ClearingAccount")
                                .IsRequired()
                                .HasColumnName("CounterpartClearingAccount")
                                .HasMaxLength(15)
                                .IsUnicode(false);

                            b1.Property<string>("Command")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CounterpartCommand")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasDefaultValue("0");

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasColumnName("CounterpartDocument")
                                .HasMaxLength(14)
                                .IsUnicode(false);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("CounterpartName")
                                .HasMaxLength(80)
                                .IsUnicode(false);

                            b1.HasKey("TicketSwapCetipTicketId");

                            b1.ToTable("TicketSwapCetip","Ticket");

                            b1.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketSwapCetip")
                                .WithOne("Counterpart")
                                .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Counterpart", "TicketSwapCetipTicketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketVariableIncome", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.Ticket", "Ticket")
                        .WithOne()
                        .HasForeignKey("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketVariableIncome", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketVariableIncomeItem", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.TicketVariableIncome", "TicketVariableIncome")
                        .WithMany("LineItems")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.UserAccountManager", b =>
                {
                    b.HasOne("Solve.FinancialMarketIntegration.API.Areas.Tickets.Entities.AccountManager", "AccountManager")
                        .WithMany("UsersAccountManagers")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
